2014-12-30  Chris Rorvick  <chris@rorvick.com>

	Use xdr() for encoding/decoding size

	The XDR::xdr_ops function takes a signed value, requiring some
	coercing to us it for the unsigned size value.  Use our API
	instead to clean up the code.

2014-12-29  Chris Rorvick  <chris@rorvick.com>

	Encode map entries using std::pair specialization

	Now that const values can be encoded we can use the std::pair
	logic.

2014-12-28  Chris Rorvick  <chris@rorvick.com>

	Remove unnecessary const_cast

	Now that an const T overload of xdr() has been added back, the
	cast is no longer necessary.

2014-12-27  Chris Rorvick  <chris@rorvick.com>

	Add const overload for encoding

	Now that it is not overloaded for other reasons we can add the
	const overload back without having to worry much about which
	overload/ specialization will be matched.

2014-12-26  Chris Rorvick  <chris@rorvick.com>

	Use xdrer specialization for std::string

2014-12-25  Chris Rorvick  <chris@rorvick.com>

	Use xdrer specialization for std::pair

2014-12-25  Chris Rorvick  <chris@rorvick.com>

	Rename namespace: `detail' => `impl'

2014-12-24  Chris Rorvick  <chris@rorvick.com>

	Split header out into many

	Each STL container added pulls in another standard library
	header.  This is a waste of time when building if someone has
	otherwise been careful to only pull in only what is needed.
	Split the definitions out by supported container to alleviate
	this issue.

2014-12-23  Chris Rorvick  <chris@rorvick.com>

	Add support for T::xdr(XDR*)

	Route the encoding/decoding through a template class and have
	the primary implementation call into T::xdr(XDR*) and write
	specializations for everything else.  Actually, not *everything*
	yet, but eventually.

2014-12-22  Chris Rorvick  <chris@rorvick.com>

	Add support for std::list

	Using the iterator interface in the vector encode/decode logic
	allows it to work on lists, too.

2014-12-22  Chris Rorvick  <chris@rorvick.com>

	Remove const-value overload

	This seemed like a nice convenience (e.g., it made possible to
	use the overload for std::pair when encoding maps), but it is
	also problematic. In one case it was recursing into itself,
	causing the stack to overflow.

	Remove this overload and fix up the map-encoding dependency on
	it.  If there is a better way to do this, maybe add it back
	later.

2014-12-21  Chris Rorvick  <chris@rorvick.com>

	Move everything into `xdrpp' namespace

2014-12-21  Chris Rorvick  <chris@rorvick.com>

	Move const value encoder to top

	When the code is added to a namespace this stopped working
	(i.e., the compiler could not figure out what to do if the
	passed value was const.) Moving this definition to the top of
	the header fixes the problem.  I am not sure if this is
	resolving a real issue with regard to the spec, or if it is just
	a weird thing with GCC.  I might try to figure this out later.

2014-12-19  Chris Rorvick  <chris@rorvick.com>

	Use unsigned type for `size'

	`size' is only signed so that it conforms to the respecitve
	xdr_ops signatures.  Make this an unsigned variable and use a
	copy with xdr.

2014-12-18  Chris Rorvick  <chris@rorvick.com>

	I am the author

2014-12-18  Chris Rorvick  <chris@rorvick.com>

	Fill in ChangeLog

2014-12-18  Chris Rorvick  <chris@rorvick.com>

	Prefer std::min over ternary operation

	Grabbing the lesser of the two is the intent.  Use std::min to
	show this more explicitly.

2014-12-17  Chris Rorvick  <chris@rorvick.com>

	Autotoolize the build

	Make this a real library and place it under the MIT license.

2014-12-16  Chris Rorvick  <chris@rorvick.com>

	Rename xdr++ => xdrpp

2014-12-16  Chris Rorvick  <chris@rorvick.com>

	Add support for std::multimap

2014-12-16  Chris Rorvick  <chris@rorvick.com>

	Add support for std::deque

2014-12-15  Chris Rorvick  <chris@rorvick.com>

	Split out encode/decode logic

	The encode/decode logic for vectors and maps is generic and
	applies to other vector-like and map-like data structures.
	Split this out so that it can be reused when other data
	structures are added.

	Also, splitting these out makes the code a tad easier to look
	at.

2014-12-13  Chris Rorvick  <chris@rorvick.com>

	Include <cstdint> instead of <stdint.h>

	Now that the code requires C++11 we might as well prefer the C++
	version of this header.

2014-12-13  Chris Rorvick  <chris@rorvick.com>

	Use range-based for loop

	Looks so much nicer!

2013-07-07  Chris Rorvick  <chris@rorvick.com>

	Add support for std::map.

2013-07-07  Chris Rorvick  <chris@rorvick.com>

	Add support for std::pair.

2013-07-07  Chris Rorvick  <chris@rorvick.com>

	Add support for std::vector.

2013-07-07  Chris Rorvick  <chris@rorvick.com>

	Pad string output to word boundary.

2013-07-07  Chris Rorvick  <chris@rorvick.com>

	Only modify output parameter if successful.

2013-07-07  Chris Rorvick  <chris@rorvick.com>

	Allow encoding of const values.

2013-07-06  Chris Rorvick  <chris@rorvick.com>

	C++ wrapper around XDR.
